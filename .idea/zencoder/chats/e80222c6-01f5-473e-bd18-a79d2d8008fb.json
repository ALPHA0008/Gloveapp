{
    "checksum": "bd4a622a9ece4b475740e92e25e77fe0b73b7a120a0c4d3e832442bc37292cd6",
    "data": {
    "id": "e80222c6-01f5-473e-bd18-a79d2d8008fb",
    "createdAt": 1750550513545,
    "updatedAt": 1750550615164,
    "title": "/fix if (isScanning) Icons.Default.BluetoothtDi...",
    "messages": [
        {
            "id": "fc38eded-9902-47bf-82fc-a1c9ee1f4f06",
            "role": "user",
            "content": [
                {
                    "type": "command",
                    "commandName": "fix"
                },
                {
                    "type": "codeSnippet",
                    "text": "if (isScanning) Icons.Default.BluetoothtDisabled else Icons.Default.Bluetooth",
                    "language": "kotlin"
                },
                {
                    "type": "text",
                    "text": "Unresolved reference 'BluetoothtDisabled'."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "C:\\Users\\abhi\\AndroidStudioProjects\\Gloveapp\\app\\src\\main\\java\\com\\example\\gloveapp\\ScannedDeviceInfo.kt",
                    "fsPath": "C:/Users/abhi/AndroidStudioProjects/Gloveapp/app/src/main/java/com/example/gloveapp/ScannedDeviceInfo.kt",
                    "content": "package com.example.gloveapp\n\nimport android.util.Log\nimport androidx.compose.animation.*\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.toArgb\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.core.graphics.toColorInt\nimport com.github.mikephil.charting.charts.LineChart\nimport com.github.mikephil.charting.components.Legend\nimport com.github.mikephil.charting.components.XAxis\nimport com.github.mikephil.charting.data.Entry\nimport com.github.mikephil.charting.data.LineData\nimport com.github.mikephil.charting.data.LineDataSet\nimport com.github.mikephil.charting.formatter.DefaultValueFormatter\nimport com.github.mikephil.charting.interfaces.datasets.ILineDataSet\nimport java.util.concurrent.TimeUnit\nimport kotlinx.coroutines.delay\n\ndata class ScannedDeviceInfo(\n    val name: String?,\n    val address: String\n)\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun ScanScreen(\n    devices: List<ScannedDeviceInfo>,\n    rssiValues: Map<String, Int>,\n    isScanning: Boolean,\n    onScanClick: () -> Unit,\n    onDeviceClick: (ScannedDeviceInfo) -> Unit,\n    scanInitiated: Boolean = false,\n    isLoadingPermissions: Boolean = false,\n    isDarkTheme: Boolean,\n    onToggleTheme: () -> Unit\n) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(\"Glove App\", color = MaterialTheme.colorScheme.onPrimary) },\n                actions = {\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically,\n                        modifier = Modifier.padding(end = 8.dp)\n                    ) {\n                        Icon(\n                            imageVector = if (isDarkTheme) Icons.Default.DarkMode else Icons.Default.LightMode,\n                            contentDescription = if (isDarkTheme) \"Dark Mode\" else \"Light Mode\",\n                            tint = MaterialTheme.colorScheme.onPrimary\n                        )\n                        Spacer(Modifier.width(4.dp))\n                        Switch(\n                            checked = isDarkTheme,\n                            onCheckedChange = { onToggleTheme() },\n                            colors = SwitchDefaults.colors(\n                                checkedThumbColor = MaterialTheme.colorScheme.onPrimary,\n                                uncheckedThumbColor = MaterialTheme.colorScheme.onPrimary,\n                                checkedTrackColor = MaterialTheme.colorScheme.secondary,\n                                uncheckedTrackColor = MaterialTheme.colorScheme.surfaceVariant\n                            )\n                        )\n                    }\n                },\n                colors = TopAppBarDefaults.mediumTopAppBarColors(\n                    containerColor = MaterialTheme.colorScheme.primary,\n                    titleContentColor = MaterialTheme.colorScheme.onPrimary\n                )\n            )\n        }\n    ) { padding ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .background(MaterialTheme.colorScheme.background)\n                .padding(padding)\n                .padding(horizontal = 16.dp, vertical = 12.dp),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = if (scanInitiated) Arrangement.Top else Arrangement.Center\n        ) {\n            Box(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .animateContentSize(animationSpec = tween(500))\n                    .clip(MaterialTheme.shapes.large)\n                    .background(MaterialTheme.colorScheme.surfaceVariant)\n                    .padding(16.dp),\n                contentAlignment = Alignment.Center\n            ) {\n                Column(\n                    horizontalAlignment = Alignment.CenterHorizontally,\n                    verticalArrangement = Arrangement.Center\n                ) {\n                    Text(\n                        text = \"Scan Bluetooth Devices\",\n                        style = MaterialTheme.typography.headlineSmall.copy(\n                            color = MaterialTheme.colorScheme.onSurfaceVariant\n                        ),\n                        textAlign = TextAlign.Center,\n                        modifier = Modifier.padding(bottom = 8.dp)\n                    )\n                    Button(\n                        onClick = onScanClick,\n                        modifier = Modifier\n                            .fillMaxWidth()\n                            .height(52.dp),\n                        colors = ButtonDefaults.buttonColors(\n                            containerColor = if (isScanning) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary,\n                            contentColor = if (isScanning) MaterialTheme.colorScheme.onError else MaterialTheme.colorScheme.onPrimary\n                        ),\n                        shape = MaterialTheme.shapes.medium\n                    ) {\n                        if (isLoadingPermissions) {\n                            CircularProgressIndicator(\n                                modifier = Modifier.size(24.dp),\n                                color = MaterialTheme.colorScheme.onPrimary,\n                                strokeWidth = 2.dp\n                            )\n                            Spacer(Modifier.width(8.dp))\n                            Text(\"Checking Permissions...\")\n                        } else {\n                            Icon(\n                                imageVector = if (isScanning) Icons.Default.BluetoothtDisabled else Icons.Default.Bluetooth,\n                                contentDescription = null\n                            )\n                            Spacer(Modifier.width(8.dp))\n                            Text(if (isScanning) \"Stop Scanning\" else \"Start Scan\")\n                        }\n                    }\n\n                    if (isScanning) {\n                        Spacer(Modifier.height(8.dp))\n                        Text(\n                            text = \"Scanning for devices...\",\n                            style = MaterialTheme.typography.bodySmall,\n                            color = MaterialTheme.colorScheme.onSurfaceVariant\n                        )\n                        Spacer(Modifier.height(4.dp))\n                        LinearProgressIndicator(\n                            modifier = Modifier.fillMaxWidth(),\n                            color = MaterialTheme.colorScheme.secondary\n                        )\n                    }\n                }\n            }\n\n            AnimatedVisibility(\n                visible = scanInitiated,\n                enter = fadeIn(tween(500, delayMillis = 200)),\n                exit = fadeOut(tween(200))\n            ) {\n                Spacer(Modifier.height(24.dp))\n            }\n\n            AnimatedVisibility(\n                visible = scanInitiated,\n                enter = slideInVertically(\n                    animationSpec = tween(500, delayMillis = 200),\n                    initialOffsetY = { it / 2 }\n                ) + fadeIn(tween(500, delayMillis = 200)),\n                exit = slideOutVertically(\n                    animationSpec = tween(300),\n                    targetOffsetY = { it / 2 }\n                ) + fadeOut(tween(300))\n            ) {\n                if (devices.isEmpty() && !isScanning) {\n                    Column(\n                        modifier = Modifier.fillMaxWidth(),\n                        horizontalAlignment = Alignment.CenterHorizontally,\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Spacer(Modifier.height(48.dp))\n                        Text(\n                            text = \"No Bluetooth devices found.\",\n                            style = MaterialTheme.typography.titleMedium,\n                            color = MaterialTheme.colorScheme.onBackground,\n                            textAlign = TextAlign.Center\n                        )\n                        Text(\n                            text = \"Ensure devices are ON, discoverable, and within range.\",\n                            style = MaterialTheme.typography.bodyMedium,\n                            color = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.7f),\n                            textAlign = TextAlign.Center,\n                            modifier = Modifier.padding(top = 4.dp)\n                        )\n                    }\n                } else {\n                    LazyColumn(\n                        modifier = Modifier.fillMaxWidth(),\n                        verticalArrangement = Arrangement.spacedBy(8.dp)\n                    ) {\n                        items(devices) { device ->\n                            DeviceCard(\n                                device = device,\n                                rssi = rssiValues[device.address],\n                                onClick = { onDeviceClick(device) }\n                            )\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun DeviceCard(\n    device: ScannedDeviceInfo,\n    rssi: Int?,\n    onClick: () -> Unit\n) {\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .clickable(onClick = onClick)\n            .clip(MaterialTheme.shapes.medium),\n        shape = MaterialTheme.shapes.medium,\n        elevation = CardDefaults.cardElevation(2.dp),\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)\n    ) {\n        Column(\n            Modifier\n                .padding(16.dp)\n        ) {\n            Text(\n                text = device.name ?: \"Unknown Device\",\n                style = MaterialTheme.typography.titleMedium.copy(\n                    color = MaterialTheme.colorScheme.onSurface\n                )\n            )\n            Spacer(Modifier.height(4.dp))\n            Text(\n                text = \"MAC: ${device.address}\",\n                style = MaterialTheme.typography.bodySmall.copy(\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\n                )\n            )\n\n            if (rssi != null) {\n                Spacer(Modifier.height(6.dp))\n                Row(verticalAlignment = Alignment.CenterVertically) {\n                    Text(\n                        \"RSSI: $rssi dBm\",\n                        style = MaterialTheme.typography.labelSmall.copy(\n                            fontWeight = FontWeight.Bold,\n                            color = MaterialTheme.colorScheme.onSurface\n                        )\n                    )\n                    Spacer(Modifier.width(8.dp))\n                    Box(\n                        modifier = Modifier\n                            .width(50.dp)\n                            .height(6.dp)\n                            .clip(RoundedCornerShape(3.dp))\n                            .background(\n                                Brush.horizontalGradient(\n                                    listOf(\n                                        Color(0xFFEA4335),\n                                        Color(0xFFFBBC04),\n                                        Color(0xFF34A853)\n                                    )\n                                )\n                            )\n                    )\n                }\n            }\n\n            Spacer(Modifier.height(12.dp))\n            Button(\n                onClick = onClick,\n                modifier = Modifier.fillMaxWidth(),\n                shape = MaterialTheme.shapes.small,\n                colors = ButtonDefaults.buttonColors(\n                    containerColor = MaterialTheme.colorScheme.secondary,\n                    contentColor = MaterialTheme.colorScheme.onSecondary\n                )\n            ) {\n                Text(\"Connect\")\n            }\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun GetReadyScreen(\n    onCountdownComplete: () -> Unit,\n    isDarkTheme: Boolean,\n    onToggleTheme: () -> Unit\n) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(\"Get Ready\", color = MaterialTheme.colorScheme.onPrimary) },\n                actions = {\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically,\n                        modifier = Modifier.padding(end = 8.dp)\n                    ) {\n                        Icon(\n                            imageVector = if (isDarkTheme) Icons.Default.DarkMode else Icons.Default.LightMode,\n                            contentDescription = if (isDarkTheme) \"Dark Mode\" else \"Light Mode\",\n                            tint = MaterialTheme.colorScheme.onPrimary\n                        )\n                        Spacer(Modifier.width(4.dp))\n                        Switch(\n                            checked = isDarkTheme,\n                            onCheckedChange = { onToggleTheme() },\n                            colors = SwitchDefaults.colors(\n                                checkedThumbColor = MaterialTheme.colorScheme.onPrimary,\n                                uncheckedThumbColor = MaterialTheme.colorScheme.onPrimary,\n                                checkedTrackColor = MaterialTheme.colorScheme.secondary,\n                                uncheckedTrackColor = MaterialTheme.colorScheme.surfaceVariant\n                            )\n                        )\n                    }\n                },\n                colors = TopAppBarDefaults.mediumTopAppBarColors(\n                    containerColor = MaterialTheme.colorScheme.primary,\n                    titleContentColor = MaterialTheme.colorScheme.onPrimary\n                )\n            )\n        }\n    ) { padding ->\n        var countdown by remember { mutableStateOf(5) }\n\n        LaunchedEffect(Unit) {\n            Log.d(\"BLE_DEBUG_TIMER\", \"GetReadyScreen: Countdown started at 5 seconds\")\n            try {\n                while (countdown > 0) {\n                    delay(1000L)\n                    countdown--\n                    Log.d(\"BLE_DEBUG_TIMER\", \"GetReadyScreen: Countdown at $countdown seconds\")\n                }\n                Log.d(\"BLE_DEBUG_TIMER\", \"GetReadyScreen: Countdown complete, calling onCountdownComplete\")\n                onCountdownComplete()\n            } catch (e: Exception) {\n                Log.e(\"BLE_DEBUG_TIMER\", \"Error in countdown: ${e.message}\")\n            }\n        }\n\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .background(MaterialTheme.colorScheme.background)\n                .padding(padding),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Text(\n                text = \"Get Ready To Grasp in ${countdown}sec\",\n                style = MaterialTheme.typography.headlineLarge.copy(\n                    fontWeight = FontWeight.Bold,\n                    color = MaterialTheme.colorScheme.onBackground\n                ),\n                textAlign = TextAlign.Center\n            )\n            Spacer(Modifier.height(16.dp))\n            CircularProgressIndicator(\n                modifier = Modifier.size(48.dp),\n                color = MaterialTheme.colorScheme.primary,\n                strokeWidth = 4.dp\n            )\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MainScreen(\n    onScanClick: () -> Unit,\n    fsrEntries: List<List<Entry>>,\n    flexEntries: List<List<Entry>>,\n    imuBioEntries: List<List<Entry>>,\n    dataUpdateTrigger: Int,\n    isDataStreamingEnabled: Boolean,\n    isDeviceReadyForControl: Boolean,\n    onStartStreaming: () -> Unit,\n    onStopStreaming: () -> Unit,\n    isDarkTheme: Boolean,\n    onToggleTheme: () -> Unit,\n    isTimerRunning: Boolean,\n    timerStartTimeMillis: Long,\n    timerAccumulatedMillis: Long,\n    onViewResult: () -> Unit\n) {\n    var isGrasp by remember { mutableStateOf(true) }\n    var isTimerCompleted by remember { mutableStateOf(false) }\n\n    // Check if timer has reached 2 minutes and stop streaming\n    LaunchedEffect(isTimerRunning, timerStartTimeMillis, timerAccumulatedMillis) {\n        if (isTimerRunning) {\n            val startTime = timerStartTimeMillis\n            val elapsedSinceStart = System.currentTimeMillis() - startTime + timerAccumulatedMillis\n            if (elapsedSinceStart >= 120_000L) {\n                Log.d(\"BLE_DEBUG_TIMER\", \"Timer reached 2 minutes, stopping streaming\")\n                onStopStreaming()\n                isTimerCompleted = true\n            } else {\n                isTimerCompleted = false\n                delay(120_000L - elapsedSinceStart)\n                if (isTimerRunning) {\n                    Log.d(\"BLE_DEBUG_TIMER\", \"Timer reached 2 minutes after delay, stopping streaming\")\n                    onStopStreaming()\n                    isTimerCompleted = true\n                }\n            }\n        } else {\n            isTimerCompleted = timerAccumulatedMillis >= 120_000L\n        }\n    }\n\n    // Grasp-release cycling\n    LaunchedEffect(isDataStreamingEnabled, timerStartTimeMillis) {\n        if (isDataStreamingEnabled && isTimerRunning) {\n            while (isDataStreamingEnabled) {\n                isGrasp = true\n                Log.d(\"BLE_DEBUG_TIMER\", \"Grasp state: Grasp\")\n                delay(5000L)\n                if (!isDataStreamingEnabled) break\n                isGrasp = false\n                Log.d(\"BLE_DEBUG_TIMER\", \"Grasp state: Release\")\n                delay(5000L)\n            }\n        }\n    }\n\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(\"DATA\", color = MaterialTheme.colorScheme.onPrimary) },\n                navigationIcon = {\n                    IconButton(onClick = onScanClick) {\n                        Icon(\n                            Icons.Default.PowerSettingsNew,\n                            contentDescription = \"Disconnect and Scan\",\n                            tint = MaterialTheme.colorScheme.onPrimary\n                        )\n                    }\n                },\n                actions = {\n                    TimerDisplay(\n                        isRunning = isTimerRunning,\n                        startTimeMillis = timerStartTimeMillis,\n                        accumulatedMillis = timerAccumulatedMillis,\n                        color = MaterialTheme.colorScheme.onPrimary\n                    )\n                    Spacer(Modifier.width(8.dp))\n                    Row(\n                        verticalAlignment = Alignment.CenterVertically,\n                        modifier = Modifier.padding(end = 8.dp)\n                    ) {\n                        Icon(\n                            imageVector = if (isDarkTheme) Icons.Default.DarkMode else Icons.Default.LightMode,\n                            contentDescription = if (isDarkTheme) \"Dark Mode\" else \"Light Mode\",\n                            tint = MaterialTheme.colorScheme.onPrimary\n                        )\n                        Spacer(Modifier.width(4.dp))\n                        Switch(\n                            checked = isDarkTheme,\n                            onCheckedChange = { onToggleTheme() },\n                            colors = SwitchDefaults.colors(\n                                checkedThumbColor = MaterialTheme.colorScheme.onPrimary,\n                                uncheckedThumbColor = MaterialTheme.colorScheme.onPrimary,\n                                checkedTrackColor = MaterialTheme.colorScheme.secondary,\n                                uncheckedTrackColor = MaterialTheme.colorScheme.surfaceVariant\n                            )\n                        )\n                    }\n                },\n                colors = TopAppBarDefaults.mediumTopAppBarColors(\n                    containerColor = MaterialTheme.colorScheme.primary,\n                    titleContentColor = MaterialTheme.colorScheme.onPrimary\n                )\n            )\n        }\n    ) { padding ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .background(MaterialTheme.colorScheme.background)\n                .padding(padding)\n                .verticalScroll(rememberScrollState())\n                .padding(16.dp),\n            verticalArrangement = Arrangement.spacedBy(16.dp)\n        ) {\n            Button(\n                onClick = { if (isDataStreamingEnabled) onStopStreaming() else onStartStreaming() },\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(52.dp),\n                enabled = isDeviceReadyForControl,\n                colors = ButtonDefaults.buttonColors(\n                    containerColor = if (isDataStreamingEnabled) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary,\n                    contentColor = if (isDataStreamingEnabled) MaterialTheme.colorScheme.onError else MaterialTheme.colorScheme.onPrimary,\n                    disabledContainerColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.12f),\n                    disabledContentColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.38f)\n                ),\n                shape = MaterialTheme.shapes.medium\n            ) {\n                Icon(\n                    imageVector = if (isDataStreamingEnabled) Icons.Default.Stop else Icons.Default.Bluetooth,\n                    contentDescription = null\n                )\n                Spacer(Modifier.width(8.dp))\n                Text(if (isDataStreamingEnabled) \"Stop Data\" else \"Start Data\")\n            }\n\n            GraspReleaseIndicator(isGrasp = isGrasp)\n\n            val chartColors = listOf(\n                \"#FFA500\".toColorInt(),\n                \"#4285F4\".toColorInt(),\n                \"#34A853\".toColorInt(),\n                \"#800080\".toColorInt(),\n                \"#FFD700\".toColorInt(),\n                \"#DB4437\".toColorInt(),\n                \"#607D8B\".toColorInt(),\n                \"#795548\".toColorInt(),\n                \"#9C27B0\".toColorInt(),\n                \"#00BCD4\".toColorInt(),\n                \"#FF9800\".toColorInt(),\n                \"#E91E63\".toColorInt()\n            )\n            val textColor = MaterialTheme.colorScheme.onSurface.toArgb()\n\n            ChartCard(\n                title = \"Flex Sensors\",\n                entriesList = flexEntries,\n                labels = listOf(\"Thumb\", \"Index\", \"Middle\", \"Ring\", \"Pinky\"),\n                colors = chartColors.subList(0, 5),\n                textColor = textColor,\n                dataUpdateTrigger = dataUpdateTrigger\n            )\n\n            ChartCard(\n                title = \"Force Sensors\",\n                entriesList = fsrEntries,\n                labels = listOf(\"Thumb\", \"Index\", \"Middle\", \"Ring\", \"Pinky\"),\n                colors = chartColors.subList(0, 5),\n                textColor = textColor,\n                dataUpdateTrigger = dataUpdateTrigger\n            )\n\n            val imuEntries = if (imuBioEntries.size > 1) imuBioEntries.subList(1, imuBioEntries.size) else emptyList()\n            ChartCard(\n                title = \"IMU Sensors\",\n                entriesList = imuEntries,\n                labels = listOf(\"AccelX\", \"AccelY\", \"AccelZ\", \"GyroX\", \"GyroY\", \"GyroZ\"),\n                colors = chartColors.subList(6, 12),\n                textColor = textColor,\n                dataUpdateTrigger = dataUpdateTrigger\n            )\n\n            val bioAmpEntries = if (imuBioEntries.isNotEmpty()) listOf(imuBioEntries[0]) else emptyList()\n            ChartCard(\n                title = \"BioAmp Sensor\",\n                entriesList = bioAmpEntries,\n                labels = listOf(\"BioAmp\"),\n                colors = listOf(chartColors[5]),\n                textColor = textColor,\n                dataUpdateTrigger = dataUpdateTrigger\n            )\n\n            AnimatedVisibility(\n                visible = isTimerCompleted,\n                enter = slideInVertically(\n                    animationSpec = tween(500),\n                    initialOffsetY = { it / 2 }\n                ) + fadeIn(tween(500)),\n                exit = slideOutVertically(\n                    animationSpec = tween(300),\n                    targetOffsetY = { it / 2 }\n                ) + fadeOut(tween(300))\n            ) {\n                Card(\n                    modifier = Modifier.fillMaxWidth(),\n                    shape = MaterialTheme.shapes.medium,\n                    elevation = CardDefaults.cardElevation(4.dp),\n                    colors = CardDefaults.cardColors(\n                        containerColor = MaterialTheme.colorScheme.primaryContainer\n                    )\n                ) {\n                    Column(\n                        modifier = Modifier.padding(16.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally\n                    ) {\n                        Text(\n                            text = \"Data Collection Complete!\",\n                            style = MaterialTheme.typography.titleMedium.copy(\n                                color = MaterialTheme.colorScheme.onPrimaryContainer,\n                                fontWeight = FontWeight.Bold\n                            ),\n                            textAlign = TextAlign.Center\n                        )\n                        Spacer(Modifier.height(8.dp))\n                        Text(\n                            text = \"2-minute data collection has finished.\",\n                            style = MaterialTheme.typography.bodyMedium.copy(\n                                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)\n                            ),\n                            textAlign = TextAlign.Center\n                        )\n                        Spacer(Modifier.height(16.dp))\n                        Button(\n                            onClick = onViewResult,\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .height(52.dp),\n                            colors = ButtonDefaults.buttonColors(\n                                containerColor = MaterialTheme.colorScheme.primary,\n                                contentColor = MaterialTheme.colorScheme.onPrimary\n                            ),\n                            shape = MaterialTheme.shapes.medium\n                        ) {\n                            Icon(\n                                imageVector = Icons.Default.Timer,\n                                contentDescription = null\n                            )\n                            Spacer(Modifier.width(8.dp))\n                            Text(\n                                text = \"View Result\",\n                                style = MaterialTheme.typography.titleMedium.copy(\n                                    fontWeight = FontWeight.Bold\n                                )\n                            )\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun GraspReleaseIndicator(isGrasp: Boolean) {\n    Card(\n        modifier = Modifier.fillMaxWidth(),\n        shape = MaterialTheme.shapes.medium,\n        elevation = CardDefaults.cardElevation(4.dp),\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)\n    ) {\n        Row(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(16.dp),\n            horizontalArrangement = Arrangement.SpaceBetween,\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Text(\n                text = \"Grasp-Release State\",\n                style = MaterialTheme.typography.titleMedium,\n                color = MaterialTheme.colorScheme.onSurface\n            )\n            Text(\n                text = if (isGrasp) \"Grasp\" else \"Release\",\n                style = MaterialTheme.typography.titleMedium,\n                color = if (isGrasp) Color(0xFF34A853) else Color(0xFFEA4335),\n                fontWeight = FontWeight.Bold\n            )\n        }\n    }\n}\n\n@Composable\nfun TimerDisplay(\n    isRunning: Boolean,\n    startTimeMillis: Long,\n    accumulatedMillis: Long,\n    color: Color\n) {\n    var displayTime by remember { mutableStateOf(accumulatedMillis) }\n\n    LaunchedEffect(isRunning, startTimeMillis, accumulatedMillis) {\n        if (isRunning) {\n            val initialSystemTime = System.currentTimeMillis()\n            val initialDisplayTime = accumulatedMillis + (initialSystemTime - startTimeMillis)\n            while (isRunning) {\n                val elapsedSinceStart = System.currentTimeMillis() - initialSystemTime\n                displayTime = initialDisplayTime + elapsedSinceStart\n                Log.d(\"BLE_DEBUG_TIMER\", \"TimerDisplay: Running, time=$displayTime ms\")\n                delay(100)\n            }\n            displayTime = accumulatedMillis + (System.currentTimeMillis() - startTimeMillis)\n            Log.d(\"BLE_DEBUG_TIMER\", \"TimerDisplay: Stopped, final time=$displayTime ms\")\n        } else {\n            displayTime = accumulatedMillis\n            Log.d(\"BLE_DEBUG_TIMER\", \"TimerDisplay: Not running, time=$displayTime ms\")\n        }\n    }\n\n    val minutes = TimeUnit.MILLISECONDS.toMinutes(displayTime) % 60\n    val seconds = TimeUnit.MILLISECONDS.toSeconds(displayTime) % 60\n    val millis = (displayTime % 1000) / 10\n\n    val timeString = String.format(\"%02d:%02d:%02d\", minutes, seconds, millis)\n\n    Row(verticalAlignment = Alignment.CenterVertically) {\n        Icon(\n            Icons.Default.Timer,\n            contentDescription = \"Timer\",\n            tint = color,\n            modifier = Modifier.size(20.dp)\n        )\n        Spacer(Modifier.width(4.dp))\n        Text(\n            text = timeString,\n            color = color,\n            style = MaterialTheme.typography.bodyMedium.copy(fontWeight = FontWeight.Bold)\n        )\n    }\n}\n\n@Composable\nfun ChartCard(\n    title: String,\n    entriesList: List<List<Entry>>,\n    labels: List<String>,\n    colors: List<Int>,\n    textColor: Int,\n    dataUpdateTrigger: Int\n) {\n    Log.d(\"BLE_DEBUG_TIMER\", \"ChartCard recomposed: $title, trigger=$dataUpdateTrigger\")\n    Card(\n        modifier = Modifier.fillMaxWidth(),\n        shape = MaterialTheme.shapes.medium,\n        elevation = CardDefaults.cardElevation(4.dp),\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)\n    ) {\n        Column(Modifier.padding(16.dp)) {\n            Text(\n                text = title,\n                style = MaterialTheme.typography.titleLarge,\n                color = MaterialTheme.colorScheme.onSurface,\n                modifier = Modifier.padding(bottom = 8.dp)\n            )\n            AndroidView(\n                factory = { context ->\n                    LineChart(context).apply {\n                        description.isEnabled = false\n                        setTouchEnabled(true)\n                        isDragEnabled = true\n                        setScaleEnabled(true)\n                        setDrawGridBackground(false)\n                        setPinchZoom(true)\n                        setBackgroundColor(Color.Transparent.toArgb())\n\n                        legend.apply {\n                            form = Legend.LegendForm.LINE\n                            setTextColor(textColor)\n                            verticalAlignment = Legend.LegendVerticalAlignment.BOTTOM\n                            horizontalAlignment = Legend.LegendHorizontalAlignment.LEFT\n                            orientation = Legend.LegendOrientation.HORIZONTAL\n                            setDrawInside(false)\n                            isWordWrapEnabled = true\n                        }\n\n                        xAxis.apply {\n                            setTextColor(textColor)\n                            position = XAxis.XAxisPosition.BOTTOM\n                            setDrawGridLines(false)\n                            axisLineColor = textColor\n                            granularity = 1f\n                        }\n\n                        axisLeft.apply {\n                            setTextColor(textColor)\n                            setDrawGridLines(true)\n                            axisLineColor = textColor\n                            gridColor = Color(textColor).copy(alpha = 0.2f).toArgb()\n                        }\n                        axisRight.isEnabled = false\n                    }\n                },\n                update = { chart ->\n                    try {\n                        updateChartDataOptimized(chart, entriesList, labels, colors, textColor)\n                        Log.d(\"BLE_DEBUG_TIMER\", \"Chart updated: $title\")\n                    } catch (e: Exception) {\n                        Log.e(\"BLE_DEBUG_TIMER\", \"Error updating chart $title: ${e.message}\")\n                    }\n                },\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(250.dp)\n            )\n        }\n    }\n}\n\nprivate fun updateChartDataOptimized(\n    chart: LineChart,\n    entriesList: List<List<Entry>>,\n    labels: List<String>,\n    colors: List<Int>,\n    textColor: Int\n) {\n    if (entriesList.isEmpty() || entriesList.all { it.isEmpty() }) {\n        chart.clear()\n        chart.invalidate()\n        return\n    }\n\n    val lineData = chart.data\n\n    if (lineData != null && lineData.dataSetCount == entriesList.size) {\n        var dataSetChanged = false\n        for (i in entriesList.indices) {\n            val entries = entriesList[i]\n            val dataSet = lineData.getDataSetByIndex(i) as? LineDataSet\n\n            if (dataSet != null) {\n                if (dataSet.values !== entries) {\n                    dataSet.values = entries\n                    dataSetChanged = true\n                }\n            } else {\n                Log.e(\"BLE_DEBUG_TIMER\", \"DataSet at index $i is null or wrong type!\")\n                chart.clear()\n                chart.invalidate()\n                return\n            }\n        }\n\n        if (dataSetChanged) {\n            lineData.notifyDataChanged()\n            chart.notifyDataSetChanged()\n            chart.invalidate()\n        }\n    } else {\n        val dataSets = ArrayList<ILineDataSet>()\n        for (i in entriesList.indices) {\n            val entries = entriesList[i]\n            val label = labels.getOrElse(i) { \"Data ${i + 1}\" }\n            val color = colors.getOrElse(i) { Color.Gray.toArgb() }\n\n            val dataSet = LineDataSet(entries, label).apply {\n                this.color = color\n                this.valueTextColor = textColor\n                lineWidth = 1.5f\n                setDrawValues(false)\n                setDrawCircles(false)\n                mode = LineDataSet.Mode.LINEAR\n                valueFormatter = DefaultValueFormatter(1)\n                highLightColor = Color.White.toArgb()\n            }\n            dataSets.add(dataSet)\n        }\n\n        if (dataSets.isNotEmpty()) {\n            chart.data = LineData(dataSets)\n            chart.invalidate()\n        } else {\n            chart.clear()\n            chart.invalidate()\n        }\n    }\n}\n\n@Preview(showBackground = true, widthDp = 360, heightDp = 640)\n@Composable\nfun PreviewScanScreenInitial() {\n    GloveAppTheme(darkTheme = false) {\n        ScanScreen(\n            devices = emptyList(),\n            rssiValues = emptyMap(),\n            isScanning = false,\n            onScanClick = {},\n            onDeviceClick = {},\n            scanInitiated = false,\n            isLoadingPermissions = false,\n            isDarkTheme = false,\n            onToggleTheme = {}\n        )\n    }\n}\n\n@Preview(showBackground = true, widthDp = 360, heightDp = 640)\n@Composable\nfun PreviewScanScreenScanning() {\n    GloveAppTheme(darkTheme = false) {\n        ScanScreen(\n            devices = emptyList(),\n            rssiValues = emptyMap(),\n            isScanning = true,\n            onScanClick = {},\n            onDeviceClick = {},\n            scanInitiated = true,\n            isLoadingPermissions = false,\n            isDarkTheme = false,\n            onToggleTheme = {}\n        )\n    }\n}\n\n@Preview(showBackground = true, widthDp = 360, heightDp = 640)\n@Composable\nfun PreviewScanScreenWithDevices() {\n    GloveAppTheme(darkTheme = true) {\n        ScanScreen(\n            devices = listOf(\n                ScannedDeviceInfo(\"Glove Sensor 1\", \"00:11:22:33:AA:BB\"),\n                ScannedDeviceInfo(\"My BLE Device\", \"CC:DD:EE:FF:00:11\"),\n                ScannedDeviceInfo(null, \"11:22:33:44:55:66\")\n            ),\n            rssiValues = mapOf(\n                \"00:11:22:33:AA:BB\" to -55,\n                \"CC:DD:EE:FF:00:11\" to -72,\n                \"11:22:33:44:55:66\" to -88\n            ),\n            isScanning = false,\n            onScanClick = {},\n            onDeviceClick = {},\n            scanInitiated = true,\n            isLoadingPermissions = false,\n            isDarkTheme = true,\n            onToggleTheme = {}\n        )\n    }\n}\n\n@Composable\nfun GloveAppTheme(darkTheme: Boolean, content: @Composable () -> Unit) {\n    // Use the theme from ui.theme\n    val colors = if (darkTheme) {\n        MaterialTheme.colorScheme.copy(\n            primary = Color(0xFFBB86FC),\n            onPrimary = Color.Black,\n            background = Color(0xFF121212),\n            onBackground = Color.White,\n            surface = Color(0xFF1E1E1E),\n            onSurface = Color.White,\n            secondary = Color(0xFF03DAC6),\n            onSecondary = Color.Black\n        )\n    } else {\n        MaterialTheme.colorScheme.copy(\n            primary = Color(0xFF6200EE),\n            onPrimary = Color.White,\n            background = Color.White,\n            onBackground = Color.Black,\n            surface = Color(0xFFF5F5F5),\n            onSurface = Color.Black,\n            secondary = Color(0xFF03DAC6),\n            onSecondary = Color.Black\n        )\n    }\n    MaterialTheme(\n        colorScheme = colors,\n        typography = MaterialTheme.typography,\n        shapes = MaterialTheme.shapes,\n        content = content\n    )\n}\n\n@Preview(showBackground = true, widthDp = 360, heightDp = 640)\n@Composable\nfun PreviewGetReadyScreen() {\n    GloveAppTheme(darkTheme = false) {\n        GetReadyScreen(\n            onCountdownComplete = {},\n            isDarkTheme = false,\n            onToggleTheme = {}\n        )\n    }\n}\n\n@Preview(showBackground = true, widthDp = 360, heightDp = 900)\n@Composable\nfun PreviewMainScreenLightFourCharts() {\n    GloveAppTheme(darkTheme = false) {\n        val previewFlex = remember { mutableStateOf(List(5) { (0..50).map { Entry(it.toFloat(), (Math.random() * 600 + 300).toFloat()) } }) }\n        val previewFsr = remember { mutableStateOf(List(5) { (0..50).map { Entry(it.toFloat(), (Math.random() * 1000 + 500).toFloat()) } }) }\n        val previewImuBio = remember { mutableStateOf(List(7) { (0..50).map { Entry(it.toFloat(), (Math.random() * 200 - 100).toFloat()) } }) }\n        var trigger by remember { mutableStateOf(0) }\n\n        LaunchedEffect(Unit) {\n            while (true) {\n                delay(500)\n                previewFlex.value = List(5) { (0..50).map { Entry(it.toFloat(), (Math.random() * 600 + 300).toFloat()) } }\n                previewFsr.value = List(5) { (0..50).map { Entry(it.toFloat(), (Math.random() * 1000 + 500).toFloat()) } }\n                previewImuBio.value = List(7) { (0..50).map { Entry(it.toFloat(), (Math.random() * 200 - 100).toFloat()) } }\n                trigger++\n            }\n        }\n\n        MainScreen(\n            onScanClick = {},\n            fsrEntries = previewFsr.value,\n            flexEntries = previewFlex.value,\n            imuBioEntries = previewImuBio.value,\n            dataUpdateTrigger = trigger,\n            isDataStreamingEnabled = true,\n            isDeviceReadyForControl = true,\n            onStartStreaming = {},\n            onStopStreaming = {},\n            isDarkTheme = false,\n            onToggleTheme = {},\n            isTimerRunning = true,\n            timerStartTimeMillis = System.currentTimeMillis() - 123456L,\n            timerAccumulatedMillis = 5000L,\n            onViewResult = {}\n        )\n    }\n}\n\n@Preview(showBackground = true, widthDp = 360, heightDp = 900)\n@Composable\nfun PreviewMainScreenDarkNotReadyFourCharts() {\n    GloveAppTheme(darkTheme = true) {\n        MainScreen(\n            onScanClick = {},\n            fsrEntries = List(5) { emptyList() },\n            flexEntries = List(5) { emptyList() },\n            imuBioEntries = List(7) { emptyList() },\n            dataUpdateTrigger = 0,\n            isDataStreamingEnabled = false,\n            isDeviceReadyForControl = false,\n            onStartStreaming = {},\n            onStopStreaming = {},\n            isDarkTheme = true,\n            onToggleTheme = {},\n            isTimerRunning = false,\n            timerStartTimeMillis = 0L,\n            timerAccumulatedMillis = 0L,\n            onViewResult = {}\n        )\n    }\n}\n\n@Preview(showBackground = true, widthDp = 360, heightDp = 900)\n@Composable\nfun PreviewMainScreenWithViewResultButton() {\n    GloveAppTheme(darkTheme = false) {\n        val previewFlex = remember { mutableStateOf(List(5) { (0..50).map { Entry(it.toFloat(), (Math.random() * 600 + 300).toFloat()) } }) }\n        val previewFsr = remember { mutableStateOf(List(5) { (0..50).map { Entry(it.toFloat(), (Math.random() * 1000 + 500).toFloat()) } }) }\n        val previewImuBio = remember { mutableStateOf(List(7) { (0..50).map { Entry(it.toFloat(), (Math.random() * 200 - 100).toFloat()) } }) }\n\n        MainScreen(\n            onScanClick = {},\n            fsrEntries = previewFsr.value,\n            flexEntries = previewFlex.value,\n            imuBioEntries = previewImuBio.value,\n            dataUpdateTrigger = 0,\n            isDataStreamingEnabled = false,\n            isDeviceReadyForControl = true,\n            onStartStreaming = {},\n            onStopStreaming = {},\n            isDarkTheme = false,\n            onToggleTheme = {},\n            isTimerRunning = false,\n            timerStartTimeMillis = 0L,\n            timerAccumulatedMillis = 120_000L,\n            onViewResult = {}\n        )\n    }\n}",
                    "language": "kotlin"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1750550513549,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "command",
                                "attrs": {
                                    "label": "fix"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "/fix"
                                    }
                                ]
                            },
                            {
                                "type": "codeBlock",
                                "attrs": {
                                    "language": "kotlin"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "if (isScanning) Icons.Default.BluetoothtDisabled else Icons.Default.Bluetooth"
                                    }
                                ]
                            },
                            {
                                "type": "text",
                                "text": "Unresolved reference 'BluetoothtDisabled'."
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "1a44a169-beab-4ca8-8809-46d7c413a7e0",
            "role": "system",
            "content": [
                {
                    "type": "errorText",
                    "text": "Rate limit exceeded. You can try again on June 23 at 03:49.",
                    "allowRegenerate": true,
                    "actions": [
                        {
                            "type": "upgradePlan",
                            "waitSeconds": 80146
                        }
                    ]
                }
            ],
            "createdAt": 1750550615164,
            "isInternal": false
        }
    ],
    "isAgent": true,
    "isCustomAgent": false
}
}